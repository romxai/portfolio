/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef, useEffect, useMemo } from "react";
import { PerspectiveCamera, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeElements, useFrame } from "@react-three/fiber";
import { CAMERA_CONFIG, DEBUG } from "../../utils/sceneConfig";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder021: THREE.Mesh;
    Cylinder021_1: THREE.Mesh;
    Cylinder021_2: THREE.Mesh;
    Cylinder021_3: THREE.Mesh;
    Cylinder021_4: THREE.Mesh;
    Cylinder021_5: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshPhysicalMaterial;
    ["Material.009"]: THREE.MeshStandardMaterial;
    glass: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
};

/**
 * Jet component
 * Renders a realistic jet aircraft with optional debug axes
 */
export function Jet(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/realistic_jet.glb"
  ) as unknown as GLTFResult;

  // References for animation
  const jetRef = useRef<THREE.Group>(null);

  // Create debug axes geometries
  const axesGeometries = useMemo(() => {
    const xPoints = [
      new THREE.Vector3(0, 0, 0),
      new THREE.Vector3(DEBUG.AXIS_LENGTH, 0, 0),
    ];
    const yPoints = [
      new THREE.Vector3(0, 0, 0),
      new THREE.Vector3(0, DEBUG.AXIS_LENGTH, 0),
    ];
    const zPoints = [
      new THREE.Vector3(0, 0, 0),
      new THREE.Vector3(0, 0, DEBUG.AXIS_LENGTH),
    ];

    return {
      xGeometry: new THREE.BufferGeometry().setFromPoints(xPoints),
      yGeometry: new THREE.BufferGeometry().setFromPoints(yPoints),
      zGeometry: new THREE.BufferGeometry().setFromPoints(zPoints),
    };
  }, []);

  // Toggle debug axes visibility with 'a' key
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "a") {
        DEBUG.SHOW_AXES = !DEBUG.SHOW_AXES;
        console.log("Axes visibility toggled:", DEBUG.SHOW_AXES);
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  return (
    <group ref={jetRef} {...props} dispose={null}>
      {/* Main jet model */}
      <group
        position={[0.1, 0, 0]}
        rotation={[-Math.PI / 2, 0, Math.PI]}
        scale={[0.2, 0.2, 0.2]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021.geometry}
          material={materials.Material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021_1.geometry}
          material={materials["Material.009"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021_2.geometry}
          material={materials.glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021_3.geometry}
          material={materials["Material.001"]}
          // This is assumed to be the engine/propeller part
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021_4.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder021_5.geometry}
          material={materials["Material.003"]}
        />
      </group>

      {/* Debug axes */}
      {DEBUG.SHOW_AXES && (
        <>
          <primitive
            object={
              new THREE.LineSegments(
                axesGeometries.xGeometry,
                new THREE.LineBasicMaterial({ color: "red" })
              )
            }
          />
          <primitive
            object={
              new THREE.LineSegments(
                axesGeometries.yGeometry,
                new THREE.LineBasicMaterial({ color: "green" })
              )
            }
          />
          <primitive
            object={
              new THREE.LineSegments(
                axesGeometries.zGeometry,
                new THREE.LineBasicMaterial({ color: "blue" })
              )
            }
          />
        </>
      )}
    </group>
  );
}

useGLTF.preload("/realistic_jet.glb");
