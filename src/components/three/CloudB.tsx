/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeElements, useFrame } from "@react-three/fiber";
import { fadeOnBeforeCompile } from "../../utils/shaderEffects";

type GLTFResult = GLTF & {
  nodes: {
    cloudB: THREE.Mesh;
  };
  materials: {
    a: THREE.MeshPhysicalMaterial;
  };
};

/**
 * CloudB component
 * Renders a cloud model with distance-based fade effect and enhanced depth perception
 */
export function CloudB(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF("/cloudB.glb") as unknown as GLTFResult;
  const materialRef = useRef<THREE.Material | null>(null);

  // Create a wrapped fade function with explicit parameters
  const handleBeforeCompile = (shader: { fragmentShader: string }) => {
    // Parameters: shader, fadeDistance, easingFactor, nearDistance, depthFactor
    fadeOnBeforeCompile(shader, 150.0, 0.93, 15.0, 0.4);
  };

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cloudB.geometry}
        position={[-7, -9, 0]}
        scale={0.01}
      >
        <meshStandardMaterial
          ref={materialRef}
          color={materials.a.color}
          envMapIntensity={2}
          transparent
          onBeforeCompile={handleBeforeCompile}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/cloudB.glb");
