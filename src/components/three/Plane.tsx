/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame, ThreeElements } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    plane1: THREE.Mesh;
    ["01"]: THREE.Mesh;
    ["02"]: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
  };
};

const ROTATION_SPEED = 15;
const PLANE_CONFIG = {
  MAX_BANK_ANGLE: 0.5, // About 30 degrees max bank
  BANK_LERP: 0.025, // Very smooth banking transitions
  ROTATION_LERP: 0.1, // Responsive direction facing
  LOOK_AHEAD: 3, // Look ahead 3 points for banking
  POSITION_LERP: 0.1, // Smooth position following
};

export function Plane(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF("/plaine.glb") as unknown as GLTFResult;
  const prop1 = useRef<THREE.Mesh>(null!);
  const prop2 = useRef<THREE.Mesh>(null!);

  useFrame((_state, delta) => {
    prop1.current.rotation.y += delta * ROTATION_SPEED;
    prop2.current.rotation.y -= delta * ROTATION_SPEED;
  });

  return (
    <group {...props} dispose={null}>
      {/* Ambient light */}
      <ambientLight intensity={0.5} />

      {/* Directional light */}
      <directionalLight position={[-5, 10, 0]} intensity={1} />

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plane1.geometry}
        material={materials.Material}
        scale={0.2}
        position={[0, -0.5, 0]}
        rotation={[0.13, 3.14, 0]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["01"].geometry}
          material={materials["Material.001"]}
          position={[-4.68, 1.69, 0.26]}
          scale={-1}
          ref={prop1}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes["02"].geometry}
          material={materials["Material.001"]}
          position={[4.68, 1.69, 0.26]}
          ref={prop2}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/plaine.glb");
