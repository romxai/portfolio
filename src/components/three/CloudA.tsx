/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeElements, useFrame } from "@react-three/fiber";

// Import the fade effect functions
const fadeOnBeforeCompile = (shader: {fragmentShader: string }) => {
  shader.fragmentShader = shader.fragmentShader
    .replace(
      `#include <common>`,
      `#include <common>
  float exponentialEasing(float x, float a) {
  
    float epsilon = 0.00001;
    float min_param_a = 0.0 + epsilon;
    float max_param_a = 1.0 - epsilon;
    a = max(min_param_a, min(max_param_a, a));
    
    if (a < 0.5){
      // emphasis
      a = 2.0*(a);
      float y = pow(x, a);
      return y;
    } else {
      // de-emphasis
      a = 2.0*(a-0.5);
      float y = pow(x, 1.0/(1.0-a));
      return y;
    }
  }`
    )
    .replace(
      `vec4 diffuseColor = vec4( diffuse, opacity );`,
      `
float fadeDist = 350.0;
float dist = length(vViewPosition);

float fadeOpacity = smoothstep(fadeDist, 0.0, dist);
fadeOpacity = exponentialEasing(fadeOpacity, 0.93);
vec4 diffuseColor = vec4( diffuse, fadeOpacity * opacity );`
    );
};

type GLTFResult = GLTF & {
  nodes: {
    cloudA: THREE.Mesh;
  };
  materials: {
    a: THREE.MeshPhysicalMaterial;
  };
};

export function CloudA(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF("/cloudA.glb") as unknown as GLTFResult;
  const materialRef = useRef<THREE.Material | null>(null);

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cloudA.geometry}
        position={[+7, -9, 0]}
        scale={[0.01, 0.01, 0.01]}
      >
        <meshStandardMaterial
          ref={materialRef}
          color={materials.a.color}
          envMapIntensity={2}
          transparent
          onBeforeCompile={fadeOnBeforeCompile}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/cloudA.glb");
