/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { ThreeElements } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    cloudA: THREE.Mesh;
  };
  materials: {
    a: THREE.MeshPhysicalMaterial;
  };
};

export function CloudA(props: ThreeElements["group"]) {
  const { nodes, materials } = useGLTF("/cloudA.glb") as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cloudA.geometry}
        material={materials.a}
        position={[+7, -9, 0]}
        scale={[0.01, 0.01, 0.01]}
      />
    </group>
  );
}

useGLTF.preload("/cloudA.glb");
