/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    wing: THREE.Mesh
    body: THREE.Mesh
    tail: THREE.Mesh
    tailwing: THREE.Mesh
    propeller: THREE.Mesh
  }
  materials: {}
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/light-plane.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wing.geometry}
        material={nodes.wing.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.body.geometry}
        material={nodes.body.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.tail.geometry}
        material={nodes.tail.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.tailwing.geometry}
        material={nodes.tailwing.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.propeller.geometry}
        material={nodes.propeller.material}
        position={[0, 0.2, 0]}
      />
    </group>
  )
}

useGLTF.preload('/light-plane.glb')
